- name: nfcore_taxtriage
  title: "TaxTriage"
  icon: "virus"
  version: 1.1
  basestack_released: 2.0
  module: True
  url: https://nf-co.re/viralrecon
  # description: "nf-core/viralrecon is a bioinformatics analysis pipeline used to perform assembly and intra-host/low-frequency variant calling for viral samples."
  tags: 
    - "Nextflow"
    - "metagenomics"
    - "Nanopore"
    - "Illumina" 
  shared:
    services:
      orchestrator:
        label: "Orchestrator"
        name: "orchestrator"
        image: "jhuaplbio/basestack_orchestrator:v1.0.0"
        workingdir: "/opt/data"
        orchestrated: false #orchestrated means it r
        init: false
        orchestrator: true
        force_restart: false
        continuous: true
        force_init: false
        command: []
  procedures: 
    - name: nfcore_taxtriage #Top level is the left-hand selection of the menu and the major module to install 
      title: "TaxTriage"
      icon: "virus"
      module: True
      full_orientation: true
      init: false 
      dependencies:
        - target: "jhuaplbio/basestack_orchestrator:v1.0.0"
          label: "jhuaplbio/basestack_orchestrator:v1.0.0"
          type: "docker"
          format: "docker"
        - target: "bitnami/git"
          label: "bitnami/git"
          type: "docker"
          format: "docker"
        - target: "basestack-docker-taxtriage"
          label: "TaxTriage Volume"
          type: "volume"
          # git clone -b 'v0.0.1' --single-branch --depth 1 https://github.com/jhuapl-bio/taxtriage.git
        - source: 
            url: "git clone  https://github.com/jhuapl-bio/taxtriage.git"
            type: "dir"
            remove: false
            target: "${writePath}/workflows/taxtriage/taxtriage"
          type: "orchestration" 
          service:
            command: [ "sh", "-c", "git clone  https://github.com/jhuapl-bio/taxtriage.git" ]
            init: false
            force_restart: true
            image: "bitnami/git"
            name: "nfcore_taxtriage_git"
            force_init: false
            config: "${configPath}/dockerConfigs/dockerConfigOrchestrator.json"
            orchestrated: true
            workingdir: "/opt"
          target: "${writePath}/workflows/taxtriage/taxtriage"
          format: dir
          # bind: 
          #   from: "${writePath}/workflows/taxtriage"
          #   to: "/root/.nextflow"
          workingdir: "/opt/source"
          overwrite: true
          command: [ "sh", "-c", "rm -rf taxtriage; git clone  https://github.com/jhuapl-bio/taxtriage.git" ]
          label: "Tax Triage Code" 
        - source:
            url: ftp.ncbi.nlm.nih.gov
            type: "file"
            user: anonymous
            path: /genomes/refseq/assembly_summary_refseq.txt
            password: null
            protocol: ftp
            remove: true
            target: "${writePath}/workflows/taxtriage/assembly_summary_refseq.txt"
          label: Assembly Refseq
          type: "download"
          format: "file"
          target: "${writePath}/workflows/taxtriage/assembly_summary_refseq.txt"
          overwrite: true
        - source:
            url: ftp.ccb.jhu.edu
            type: file
            user: anonymous
            path: /pub/data/kraken2_dbs/old/minikraken2_v2_8GB_201904.tgz
            password: null
            protocol: ftp
            remove: false
            target: "${writePath}/workflows/taxtriage/minikraken2.tar.gz"
          label: Minikraken2
          type: download
          format: dir
          decompress:
            format: tgz
            source: "${writePath}/workflows/taxtriage/minikraken2.tar.gz"
          target: "${writePath}/workflows/taxtriage/minikraken2_v2_8GB_201904_UPDATE"
          overwrite: true
      tags: 
        - "Nextflow"
        - "metagenomics"
        - "nanopore"
        - "illumina"
      variables:
        manifest:
          label: "Input Samplesheet contents"
          element: "list"
          hint: "Samplesheet contents"
          columns: 2
          column: 12
          sep: ","
          define_columns: 
            fastq_1: 
              element: 'file'
            fastq_2: 
              element: file
            from: 
              element: dir
            sequencing_summary: 
              element: file
            platform: 
              custom: False
              options: ['ILLUMINA', 'OXFORD']
            barcode: 
              custom: False
              options: [True, False]
            trim: 
              custom: False
              options: [True, False]
            single_end: 
              custom: False
              options: [True, False]
          update_on: 
            depends:
              - csv
            action: "read"
            sep: ","
            header: true
            source: "%{variables.csv.source}"
          bind:
            from:  "<<directory(%{variables.csv.source})>>/Samplesheet.target.csv"
            to: "/opt/samplesheet/Samplesheet.csv"
          create:
            target: "<<directory(%{variables.csv.source})>>/Samplesheet.target.csv"
            sep: ","
            type: "list"
            header: ['single_end','fastq_1','fastq_2', 'sample', 'from', 'platform', 'sequencing_summary', 'barcode', 'trim']
          class: "wb-50  p-3 mb-1"
          source: []
          header: ['single_end','fastq_1','fastq_2', 'sample', 'from', 'platform', 'sequencing_summary', 'barcode', 'trim']
          append_newline: false
        csv:
          label: "Samplesheet"
          fallback: "${writePath}/workflows/nfcore_taxtriage/Samplesheet.target.csv"
          warning: "Must be in .csv format (comma separated)"
          hint: "File that contains metadata for all of your sequences in the run such as timestamp of creation. Must be in root level of your run directory. "
          element: "file"
          set:
            - target: "variables.manifest.source"
              header: ['single_end','fastq_1','fastq_2', 'sample', 'from',  'platform',  'sequencing_summary', 'barcode', 'trim']
              reformat: ['sequencing_summary', 'from', 'fastq_1', 'fastq_2']
              source: "%{variables.csv.source}"
              sep: "," 
          source: null
          bind: self
          read:
            - type: "file"
              sep: ","
              source: "%{variables.csv.source}"
              bind: "self"
              column: "fastq_1"
            - type: "file"
              sep: ","
              source: "%{variables.csv.source}"
              bind: "self"
              column: "fastq_2"
            - type: "directory"
              sep: ","
              source: "%{variables.csv.source}"
              bind: "self"
              column: "from"
            - type: "file"
              sep: ","
              source: "%{variables.csv.source}"
              bind: "self"
              column: "sequencing_summary"
        maxCPUs:
          label: "Maximum CPUs"
          element: "number"
          source: 3
          optional: true
          target: "%{variables.maxCPUs.source}"
          append:
            command: " --max_cpus \"${maxCPUs}\" "
            placement: 2
            position: "end"
            services: 
              - 1
        sleepTime:
          label: "Lag Time (s) between Pipeline start and Docker starting"
          source: 2
          element: number
        maxMemory:
          label: "Maximum Memory (GB)"
          element: "number"
          source: 12
          optional: true
          target: "%{variables.maxMemory.source}"
          append:
            command: " --max_memory \"${maxMemory}\"GB "
            placement: 2
            position: "end"
            services: 
              - 1
        db:
          label: Classifier database
          class: wb-100 p-3 mb-1
          option: 0
          options:
            - element: null
              name: Minikraken2
              source: "${writePath}/workflows/taxtriage/minikraken2_v2_8GB_201904_UPDATE"
              target: /opt/databases/minikraken2
              warning: >-
                Requires roughly 7.5 GB of free RAM to load. If limited in RAM
                available, try to change Memory Mapping below to classify on the
                local filesystem. If your input file is large, however, this can
                take a long time
              bind:
                from: '%{variables.db.source}'
                to: /opt/databases/minikraken2
            - element: dir
              name: Custom DB
              source: null
              target: /opt/databases/<<basename(%{variables.db.source})>>
              bind: self
        skip_assembly:
          label: "Skip De Novo Assembly"
          element: "checkbox"
          source: true
          hint: "Skip De Novo Assembly"
          define: 
            skip_assembly: "--skip_assembly"
        skip_plots:
          label: "Skip QC Plotting"
          element: "checkbox"
          source: true
          hint: "Skip QC plotting"
          define: 
            skip_plots: "--skip_plots"
        resume:
          label: "Resume Nextflow"
          element: "checkbox"
          source: true
          hint: "pick up where you left off, useful if piplines are lenghty or you're debugging issues with a failed midrun submission"
          define: 
            resume: "-resume"
        assembly_option: 
          label: "Assembly File Option"
          option: 0
          options:
            - element: null
              name: "NCBI Refseq Assembly Txt File"
              source:  "/root/.nextflow/assets/jhuapl-bio/taxtriage/examples/assembly_summary_refseq.txt"
              define: 
                assembly: "--assembly /root/.nextflow/assets/jhuapl-bio/taxtriage/examples/assembly_summary_refseq.txt"
            - element: null
              name: "Pull Assembly File Automatically"
              source: null
              target: null
              define: 
                assembly: ""
            - element: "file"
              source: null
              name: "Custom Assembly Txt file"
              hint: "Must be in the same format as the ncbi assembly refseq file"
              target: "/opt/assembly_option/<<basename(%{variables.assembly_option.source})>>"
              bind: 
                from: "%{variables.assembly_option.source}"
                to: "/opt/assembly_option/<<basename(%{variables.assembly_option.target})>>"
              define: 
                assembly: "--assembly /opt/assembly_option/<<basename(%{variables.assembly_option.target})>>"
        # code: 
        #   label: "code dir"
        #   name: "code"
        #   hidden: true
        #   bind:
        #     from:  "${writePath}/workflows/taxtriage/taxtriage"
        #     to: "/opt/code"
        # autopull: 
        #   label: "Automatically Pull Latest Code from GitHub"
        #   name: pull
        #   source: true
        #   element: "checkbox"
        #   target: null
        #   append:
        #     command: "git -C /opt/code pull ; "
        #     placement: 2
        #     position: "start"
        #     services: 
        #       - 0
        filter_db:
          label: "Filter Database"
          element: "dir"
          source: null
          hint: "Database to extract reads out of"
          target: "/opt/database_filter"
          bind: "self"
          define:
            filter: " --filter %{variables.filter_db.target} "
        remove_taxids:
          label: "Taxids to remove"
          element: "string"
          source: "9606"
          target: null
          hint: "Specific Taxids to remove from the kraken2 outputs"
          define:
            taxids_to_remove: "--remove_taxids \"%{variables.remove_taxids.source}\""
        mark_branch:
          label: "Branch of repo to use"
          element: "main"
          source: "main"
          target: null
        latest:
          label: "Pull latest branch automatically"
          element: "checkbox"
          source: false
          target: null
          warning: "fails if no internet is available. Uncheck if without internet"
          hint: "Warning: Fails if no internet is available. Uncheck if without internet"
          define:
            marklatest: " -latest "
        rundir:
          label: "Run Directory"
          element: "file"
          source: null
          hint: "Requires a Samplesheet.csv with all relevant data in the same folder in terms of pathing as well as things like your fastq files and sequencing summary files"
          target: "/opt/data"
          bind: "self"
        samplesheet:
            label: "Samplesheet"
            warning: "Must be in the root (same level) of the run directory"
            hint: "File that contains metadata for all of your sequences in the run such as timestamp of creation. Must be in root level of your run directory. "
            element: "exists"
            source:  null
            validations:
              - type: "files"
                error: "Must have a Samplesheet.csv file in the root directory (directly in your run directory)"
                target: 
                  type: "value"
                  minimum: 1
                  path: "%{variables.rundir.source}"
                  value: "Samplesheet.csv$"
            update_on: 
              depends:
                - rundir
              action: "exists"
              source: "%{variables.rundir.source}"
        profile:
          label: "Profile"
          options:
            - "docker"
            - "singularity"
            - "conda"
        outdir:
          label: "Output Directory"
          output: false
          hint: "Directory to place your analysis results into"
          source: null
          name: "Output Folder"
          bind: "self"
        report:
          label: "Report"
          element: file
          openSelf: true
          output: True
          source: "%{variables.outdir.source}/multiqc/multiqc_report.html"
          path: "%{variables.outdir.source}/multiqc/multiqc_report.html"
          name: "Report"
          target: "%{variables.outdir.target}/multiqc/multiqc_report.html"
      services:
        - name: taxtriage
          orchestrator: true
          force_restart: false
          continuous: true
          force_init: false
          bind: 
            # - from: "${writePath}/workflows/taxtriage/code"
            #   to: /root/.nextflow
            - from: "${writePath}/workflows/taxtriage/workingdir"
              to: "${writePath}/workflows/taxtriage/workingdir"
          label: "TaxTriage"
          image: "jhuaplbio/basestack_orchestrator:v1.0.0"
          workingdir:  "${writePath}/workflows/taxtriage/workingdir"
          warning: "This process requires internet in its current state"
          # command: [
          #   "bash", "-c", "${pull}"
          # ]
          command: [
            "bash", "-c", "parallel --ungroup ::: dockerd-entrypoint.sh  'sleep ${sleepTime}; 
             nextflow run 'https://github.com/jhuapl-bio/taxtriage'
              --input /opt/samplesheet/Samplesheet.csv
              --db ${db}  -r ${mark_branch} ${marklatest}
              --outdir ${outdir}
              --max_memory ${maxMemory}GB --max_cpus ${maxCPUs} 
              -profile ${profile} ${skip_plots} ${skip_assembly} ${taxids_to_remove}
              ${assembly} --demux 
              ${resume} ${filter}; chmod -R 777 /opt/output; chmod +x /opt/output/**/*html;   '  "
          ]
    